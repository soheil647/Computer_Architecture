
module Register_File(Read_Register1,
                     Read_Register2,
                     Write_Register,
                     Write_Data,
                     WndSel,
                     Clock,
                     Rst,
                     RegWrite,
                     Read_Data1,
                     Read_Data2);
                     
  parameter Wnd0 = 2'b00;
  parameter Wnd1 = 2'b01;
  parameter Wnd2 = 2'b10;
  parameter Wnd3 = 2'b11;
                     
                     
  input[1:0] Read_Register1,Read_Register2,Write_Register;
  input[1:0] WndSel;
  input[15:0] Write_Data;
  input RegWrite;
  input Clock,Rst;
  output reg[15:0] Read_Data1,Read_Data2;
  
  reg[15:0] R0,R1,R2,R3,R4,R5,R6,R7;
   
 
  always@(posedge Clock) begin
    
    if(Rst) begin
      R0=8'b0;
    end
    else begin
    
    case(WndSel)
      
      Wnd0: begin
        Read_Data1 = (Read_Register1==2'b00)?R0 :(Read_Register1==2'b01)?R1 :(Read_Register1==2'b10)?R2 :(Read_Register1==2'b11)?R3 : 15'bx;
        Read_Data2 = (Read_Register2==2'b00)?R0 :(Read_Register2==2'b01)?R1 :(Read_Register2==2'b10)?R2 :(Read_Register2==2'b11)?R3 : 15'bx;

      end
      
      Wnd1: begin
        Read_Data1 = (Read_Register1==2'b00)?R2 :(Read_Register1==2'b01)?R3 :(Read_Register1==2'b10)?R4 :(Read_Register1==2'b11)?R5 : 15'bx;
        Read_Data2 = (Read_Register2==2'b00)?R2 :(Read_Register2==2'b01)?R3 :(Read_Register2==2'b10)?R4 :(Read_Register2==2'b11)?R5 : 15'bx;
     
      end
      
      Wnd2: begin
        Read_Data1 = (Read_Register1==2'b00)?R4 :(Read_Register1==2'b01)?R5 :(Read_Register1==2'b10)?R6 :(Read_Register1==2'b11)?R7 : 15'bx;
        Read_Data2 = (Read_Register2==2'b00)?R4 :(Read_Register2==2'b01)?R5 :(Read_Register2==2'b10)?R6 :(Read_Register2==2'b11)?R7 : 15'bx;

      end
      
      Wnd3: begin
        Read_Data1 = (Read_Register1==2'b00)?R6 :(Read_Register1==2'b01)?R7 :(Read_Register1==2'b10)?R0 :(Read_Register1==2'b11)?R1 : 15'bx;
        Read_Data2 = (Read_Register2==2'b00)?R6 :(Read_Register2==2'b01)?R7 :(Read_Register2==2'b10)?R0 :(Read_Register2==2'b11)?R1 : 15'bx;

      end
    endcase
  end
  end
  
  always@(posedge RegWrite , posedge Clock) begin
    
    case(WndSel)
      Wnd0: begin
        case(Write_Register)
            2'b00 : R0 <= Write_Data;
            2'b01 : R1 <= Write_Data;
            2'b10 : R2 <= Write_Data;
            2'b11 : R3 <= Write_Data;      
        endcase
      end
      
      Wnd1: begin
        case(Write_Register)
            2'b00 : R2 <= Write_Data;
            2'b01 : R3 <= Write_Data;
            2'b10 : R4 <= Write_Data;
            2'b11 : R5 <= Write_Data;    
        endcase
      end
      
      Wnd2: begin
        case(Write_Register)
            2'b00 : R4 <= Write_Data;
            2'b01 : R5 <= Write_Data;
            2'b10 : R6 <= Write_Data;
            2'b11 : R7 <= Write_Data;   
        endcase
      end
      
      Wnd3: begin
        case(Write_Register)
            2'b00 : R6 <= Write_Data;
            2'b01 : R7 <= Write_Data;
            2'b10 : R0 <= Write_Data;
            2'b11 : R1 <= Write_Data;    
        endcase
      end
  endcase
   
  end
  
endmodule

      
  
