--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV GX" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_WIDTHA=6 LPM_WIDTHB=7 LPM_WIDTHP=13 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_mult 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_padd 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 84 
SUBDESIGN mult_hrl
( 
	dataa[5..0]	:	input;
	datab[6..0]	:	input;
	result[12..0]	:	output;
) 
VARIABLE
	add12_result[12..0]	:	WIRE;
	add16_result[8..0]	:	WIRE;
	add20_result[2..0]	:	WIRE;
	add8_result[15..0]	:	WIRE;
	cs2a[3..0] : carry_sum;
	cs3a[3..0] : carry_sum;
	le4a[8..0] : lcell;
	le5a[8..0] : lcell;
	le6a[8..0] : lcell;
	le7a[7..0] : lcell;
	sft10a[15..0] : soft;
	sft11a[15..0] : soft;
	sft13a[12..0] : soft;
	sft14a[12..0] : soft;
	sft15a[12..0] : soft;
	sft17a[8..0] : soft;
	sft18a[8..0] : soft;
	sft19a[8..0] : soft;
	sft21a[2..0] : soft;
	sft22a[2..0] : soft;
	sft23a[2..0] : soft;
	sft9a[15..0] : soft;
	dataa_node[6..0]	: WIRE;
	datab_node[5..0]	: WIRE;
	final_result_node[12..0]	: WIRE;
	w137w[8..0]	: WIRE;
	w18w[7..0]	: WIRE;
	w245w	: WIRE;
	w264w	: WIRE;
	w382w[15..0]	: WIRE;
	w84w[8..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs2a[].cin = ( ((w18w[6..6] & cs2a[2].cout) # w18w[7..7]), (cs2a[1].cout & w18w[4..4]), ((w18w[2..2] & cs2a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs2a[].sin = ( ((((((! w18w[7..7]) & w18w[6..6]) & cs2a[2].cout) # ((w18w[7..7] & w18w[6..6]) & (! cs2a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs2a[2].cout)) # ((w18w[7..7] & (! w18w[6..6])) & (! cs2a[2].cout))), (cs2a[1].cout & w18w[4..4]), ((((((! w18w[3..3]) & w18w[2..2]) & cs2a[0].cout) # ((w18w[3..3] & w18w[2..2]) & (! cs2a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs2a[0].cout)) # ((w18w[3..3] & (! w18w[2..2])) & (! cs2a[0].cout))), w18w[1..1]);
	cs3a[].cin = ( ((w18w[6..6] & cs3a[2].cout) # w18w[7..7]), (cs3a[1].cout $ w18w[4..4]), ((w18w[2..2] & cs3a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs3a[].sin = ( ((((((! w18w[7..7]) & (! w18w[6..6])) & cs3a[2].cout) # (((! w18w[7..7]) & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs3a[2].cout)), (cs3a[1].cout $ w18w[4..4]), ((((((! w18w[3..3]) & (! w18w[2..2])) & cs3a[0].cout) # (((! w18w[3..3]) & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs3a[0].cout)), w18w[0..0]);
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[0].sout) & cs3a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[1].sout) & cs3a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[1].sout)) & cs3a[1].sout)))));
	le6a[].in = ((cs2a[2].sout & ( B"0", dataa_node[], B"0")) # (cs3a[2].sout & ( B"0", B"0", dataa_node[])));
	le7a[].in = (w18w[5..5] & ( B"0", dataa_node[]));
	sft10a[].in = ( w264w, ( sft15a[12..12].out, ( sft19a[8..8].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( sft15a[2..2].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( w264w, cs2a[0].sout)))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w264w, ( w245w, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le5a[2..2].out, ( le4a[3..2].out))))))))))));
	sft14a[].in = ( w264w, ( w264w, ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le6a[1..1].out, ( le4a[4..4].out, ( w264w, cs2a[1].sout))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w264w, ( w245w, ( w245w, ( (! w137w[8..8]), ( le6a[5..5].out, ( le6a[4..4].out, ( le5a[5..5].out, ( le5a[4..3].out))))))));
	sft18a[].in = ( w264w, ( w264w, ( w264w, ( sft23a[2..2].out, ( le5a[7..7].out, ( le5a[6..6].out, ( le4a[7..7].out, ( le4a[6..5].out))))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w264w, ( w245w, (! w84w[8..8])));
	sft22a[].in = ( w264w, ( w264w, w245w));
	sft23a[].in = add20_result[];
	sft9a[].in = ( w245w, ( w245w, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( le6a[0..0].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out)))))))))))))));
	dataa_node[] = ( datab[6..0]);
	datab_node[] = ( dataa[5..0]);
	final_result_node[] = ( w382w[12..0]);
	result[] = ( final_result_node[12..0]);
	w137w[] = le5a[].out;
	w18w[] = ( B"00", datab_node[]);
	w245w = B"1";
	w264w = B"0";
	w382w[] = ( sft11a[15..15].out, sft11a[14..14].out, sft11a[13..13].out, sft11a[12..12].out, sft11a[11..11].out, sft11a[10..10].out, sft11a[9..9].out, sft11a[8..8].out, sft11a[7..7].out, sft11a[6..6].out, sft11a[5..5].out, sft11a[4..4].out, sft11a[3..3].out, sft11a[2..2].out, sft11a[1..1].out, sft11a[0..0].out);
	w84w[] = le4a[].out;
END;
--VALID FILE
